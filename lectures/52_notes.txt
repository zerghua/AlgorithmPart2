R-way Tries
----------------------------------------------------------
Tries. [pronounced as "try"]
- For now, store characters in nodes(not keys).
- Each node has R children, one for each possible character.
- Store values in nodes corresponding to last characters in keys.


Search in a trie
Follow links corresponding to each character in the key.
- Search hit: node where search ends has a non-null value.
- Search miss: reach null link or node where search ends has null value.


Insertion into a trie
Follow links corresponding to each character in the key.
- Encounter a null link: create new node
- Encounter the last character of the key: set value in that node.


public class TrieST<Value>{
    private static final int R = 256;
    private Node root = new Node();

    private static class Node{
        private Object value;
        private Node[] next = new Node[R];
    }

    public void put(String key, Value val){
        root = put(root, key, val, 0);
    }

    private Node put(Node x, String key, Value val, int d){
        if(x == null) x= new Node();
        if(d == key.length()){
            x.val = val;
            return x;
        }
        char c = key.charAt(d);
        x.next[c] = put(x.next[c], key, val, d+1);
        return x;

    }

    public boolean contains(String key){
        return get(key) != null;
    }

    public Value get(String key){
        Node x = get(root, key, 0);
        if(x == null) return null;
        return (Value) x.val;
    }

    private Node get(Node x, String key, int d){
        if(x == null) return null;
        if(d == key.length()) return x;
        char c = key.charAt(d);
        return get(x.next[c], key, d+1);
    }
}


Trie performance.
Search hit. Need to examine all L characters for equality.

Search miss.
- Could have mismatch on first character.
- Typical case: examine only a few characters(sublinear).

Space. R null links at each leaf.(but sublinear space possible
if many short strings share common prefixes)

Bottom line. Fast search hit and even faster search miss, but waste space.


Popular interview questions
Goal. Design a data structure to perform efficient spell checking.
Solution. Build a 26-way trie(key=word, value = bit)


Deletion in an R-way trie
To delete a key-value pair:
- Find the node corresponding to key and set value to null.
- If node has null value and all null links, remove that node(and recur).


R-way trie.
- Method of choice for small R.
- Too much memory for large R. d

Challenge. Use less memory, e.g, 65536-way trie for unicode!





Ternary Search Tries
----------------------------------------------------------
space-efficient
- Store characters and values in nodes(not keys).
- Each node has 3 children: smaller(left), equal(middle), larger(right).


public TST<Value>{
    private Node root;

    private class Node{
        private Value val;
        private char c;
        private Node left, mid, right;
    }

    public void put(String key, Value val){
        root = put(root, key, val, 0);
    }

    private Node put(Node x, String key, Value val, int d){
        char c = key.charAt(d);
        if(x == null) {
            x = new Node(); x.c=c;
        }
        if(c < x.c) x.left = put(x.left, key, val, d);
        else if(c > x.c) x.right = put(x.right, key, val, d);
        else if(d < key.length() -1) x.mid = put(x.mid, key, val, d+1);
        else x.val = val;
        return x;
    }

    public boolean contains(String key){
        return get(key) != null;
    }

    public Value get(String key){
        Node x = get(root, key, 0);
        if(x == null) return null;
        return x.val;
    }

    private Node get(Node x, String key, int d){
        if(x == null) return null;
        char c = key.charAt(d);
        if(c < x.c) return get(x.left, key, d);
        else if (c > x.c) return get(x.right, key, d);
        else if(d < key.length() -1) return get(x.mid, key, d+1);
        else return x;
    }

}

TST
- faster than hashing(especially for search misses).
- More flexible than red-black BSTs.




Character-Based Operations
----------------------------------------------------------

Prefix match.
Wildcard match.
Longest prefix.


Ordered iteration.
To iterate through all keys in sorted order:
- Do inorder traversal of trie; add keys encountered to a queue.
- Maintain sequence of characters on path from root to node.

public Iterable<String> keys(){
    Queue<String> queue = new Queue<String>();
    collect(root, "", queue);
    return queue;
}

private void collect(Node x, String prefix, Queue<String> q){
    if(x == null) return;
    if(x.val != null) q.enqueue(prefix);
    for(char c = 0; c < R; c++){
        collect(x.next[c], prefix + c, q);
    }
}



Prefix matches
Find all keys in symbol table starting with a given prefix.

Application: auto complete.

public Iterable<String> keyWithPrefix(String prefix){
    Queue<String> queue = new Queue<String>();
    Node x = get(root, prefix, 0);
    collect(x, prefix, queue);
    return queue;
}


Longest prefix
Ex. To send packet toward destination IP address, router choose
IP address in routing table that is longest prefix match.
- search for query string.
- keep track of longest key encountered.

public String longestPrefixOf(String query){
    int length = search(root, query, 0, 0);
    return query.substring(0, length);
}

private int search(Node x, String query, int d, int length){
    if(x == null) return length;
    if(x.val != null) length = d;
    if(d == query.length()) return length;
    char c = query.charAt(d);
    return search(x.next[c], query, d+1, length);
}



T9 texting
Goal. Type text messages on a phone keypad.
Multi-tap input. Enter a letter by repeatedly pressing a key
until the desired letter appears.


Patricia trie.
- Remove one-way branching
- Each node represents a sequence of characters.
- Implementation: one step beyond this course.


Applications.
- Database search
- P2P network search
- IP routing tables: find longest prefix match.
- Compressed quad-tree for N-body simulation
- Efficiently storing and querying XML documents.


Suffix tree
- Patricia trie of suffixes of a string.
- Linear time constructions: beyond this course.

Applications.
- Linear time: longest repeated substring, longest common
substring, longest palindromic substring, substring search,
tandem repeats...
- Computational biology databases.





