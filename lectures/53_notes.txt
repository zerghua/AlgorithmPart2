Introduction to Substring Search
----------------------------------------------------------
Goal. Find pattern of length M in a text of length N.

substring search applications.
Screen scraping. Extract relevant data from web page.
Ex. Find string delimited by <b> and </b> after first
occurrence of pattern Last Trade.




Brute-Force Substring Search
----------------------------------------------------------
public static int search(String pat, String txt){
    int M = pat.length();
    int N = txt.length();
    for(int i=0; i<= N ; i++){
        int j;
        for(j = 0; j<M; j++){
            if(txt.charAt(i+j) != pat.charAt(j)) break;
        }
        if(j == M) return i;    // found
    }
    return N; // not found
}


can be slow if txt and pattern are repetitive.


Backup
In many applications, we want to avoid backup in next stream.
- Treat input as stream of data.
- Abstract model: standard input.

Brute force algorithm needs to backup for every mismatch.

Approach 1. Maintain buffer of last M characters.

best case is M, worse case is M*N

// alternating brute force code
public int search(String txt){
    int i, j, N = txt.length();
    for(i = 0, j =0; i< N && j < M; i++){
        if(txt.charAt(i) == pat.charAt(j)) j++;
        else{i -= j; j = 0 ;}
    }
    if(j == M) return i - M;
    else return N;
}


Knuth–Morris–Pratt
----------------------------------------------------------
KMP. clever method to always avoid backup.


Deterministic finite state automation(DFA)
DFA is abstract string-search machine.
- Finite number of states(including start and halt).
- Exactly one transition for each char in alphabet.
- Accept if sequence of transitions leads to halt state.


public int search(String txt){
    int i, j, N = txt.length();
    for(i = 0, j =0; i< N && j < M; i++){
        j = dfa[txt.charAt[i]][j];  // no backup
    }
    if(j == M) return i - M;
    else return N;
}

// stream data
public int search(In in){
    int i, j, N = txt.length();
    for(i = 0, j =0; !in.isEmpty()  && j < M; i++){
        j = dfa[in.readChar()][j];  // no backup
    }
    if(j == M) return i - M;
    else return NOT_FOUND;
}


public KMP(String pat){
    this.pat = pat;
    M = pat.length();
    dfa = new int[R][M];
    dfa[pat.charAt(0)][0] = 1;
    for(int X = 0, j =1; j<M; j++){
        for(int c = 0; c < R; c++) dfa[c][j] = dfa[c][x];
        dfa[pat.charAt(j)][j] = j+1;
        X = dfa[pat.charAt(j)][x];
    }
}




Boyer–Moore
----------------------------------------------------------
match from right to left from pat.

public int search(String txt, String pat){
    int N = txt.length();
    int M = pat.length();
    int skip;
    for(int i=0; i<= N-M; i += skip){
        skip = 0;
        for(int j= M-1; j>=0; j--){
            if(pat.charAt(j) != txt.charAt(i+i)){
                skip = Math.max(1, j - right[txt.charAt(i+i)]);
                break;
            }
        }
        if(skip == 0) return i;  // match
    }
    return N;
}

best case:  ~ N/M time
Worst case. can be bad as ~ M*N (BBBBBB,  ABB)
can improve worst case to ~3N




Rabin–Karp
----------------------------------------------------------
Basic idea = modular hashing
- compute a hash of pattern characters 0 to M-1
- for each i, compute a hash of text characters i to M+i-1
- if pattern hash = text substring hash, check for a match


Efficiently computing the hash function


How to efficiently compute x(i+1) given we know x(i)?
use math.

x(i+1) = (x(i) - leading_digit * R^(M-1)) * R + trailing_digit


public class RabinKarp{
    private long patHash;
    private int M;
    private long Q;
    private int R;
    private long RM;    // R^(M-1) % Q

    public RabinKarp(String pat){
        M = pat.length();
        R =256;
        Q = longRandomPrime();

        RM = 1;
        for(int i=1; i<=M-1; i++) RM = (R * RM) % Q;
        pathash = hash(pat, M);
    }

    // compute hash for M-digit key
    private long hash(String key, int M){
        long h = 0;
        for(int j =0; j<M;j++){
            h = (R*h + key.charAt(j)) % Q;
        }
        return h;
    }

    public in search(String txt){
        int N = txt.length();
        int txtHash = hash(txt, M);
        if(patHash == txtHash) return 0;
        for(int i = M; i< N; i++){
            txtHash = (txtHash + Q - RM*txt.charAt(i-M)%Q)%Q;
            txtHash = (txtHash*R + txt.charAt(i)) %Q;
            if(patHash == txtHash) return i-M + 1; //Monte carlo version
        }
        return N;
    }
}




Monte carlo version.
- Always runs in linear time
- Extremely likely to return correct answer(but not always, only check hash)


Las Vega version.
- Always returns correct answer.
- Extremely likely to run in linear time(worst case is M*N)


Advantages.
- extends to match multiple strings.
- extends to 2D pattern


Disadvantages.
- Arithmetic ops slower than char compares.
- Las Vegas version requires backup.
- poor worst-case guarantee.

