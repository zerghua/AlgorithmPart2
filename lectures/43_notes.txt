Minimum Spanning tree(MST)
----------------------------------------------------------
Given undirected graph G with positive edge weights(connected).
A Spanning tree of G is a subgraph T that is both a tree(connected
and acyclic) and spanning(includes all of the vertices).

Goal. Find a min weight of a spanning tree.
Brute force. Try all spanning trees?


Example.
Network design(Bike route).
Models of nature.
Medical image processing.



Greedy Algorithm
----------------------------------------------------------
Simplifying assumptions.
- Edge weights are distinct.
- Graph is connected.

Consequence. MST exists and is unique


Cut property.
Def. A cut in a graph is partition of its vertices into
two(nonempty) sets.

Def. A crossing edge connects a vertex in one set with a
vertex in the other.

Cut property. Given any cut, the crossing edge of min weight
is in the MST.


Greedy MST algorithm
- Start with all edges colored gray.
- Find cut with no black crossing edges; color its min-weight
edge black.
- Repeat until V-1 edges are colored black.

Efficient implementations. Choose cut? Find min-weight edge?
1. Kruskal's algorithm.
2. Prim's algorithm.
3. Boruvka's algorithm.


Removing two simplifying assumptions.
Q. What if edge weights are not all distinct?
A. Greedy MST algorithm still correct if weights are present.
multiple MST path.

Q. What if graph is not connected?
A. Compute minimum spanning forest = MST of each component.


Weighted edge API
----------------------------------------------------------
Edge abstraction needed for weighted edges.

public class Edge implements Comparable<Edge>
    Edge(int v, int w, double weight)
int either()
int other(int v)
int compareTo(Edge that)
double weight()
String toString()

Idiom for processing an edge e:
int v = e.either(), w = e.other(v);


Edge-weighted graph API

public class EdgeWeightedGraph
    EdgeWeightedGraph(int v)
void AddEdge(Edge e)
Iterable<Edge> adj(int v)

Conventions. Allow self-loops and parallel edges.


Adjacency-lists representation
Maintain vertex-indexed array of Edge lists.


// add edge to both adjacency lists
public void addEdge(Edge e){
    int v = e.either(), w = e.other(v);
    adj[v].add(e);
    adj[w].add(e);
}


MST API
public class MST
    MST(EdgedWeightedGraph G)
Iterable<Edge> edge()
double weight()     // total weight of MST




Kruskal's Algorithm
----------------------------------------------------------
Consider edges in ascending order of weight.
- Add next edge to tree T unless doing so would create a cycle.
(Ignore edges if creates a cycle)

Challenge. Would adding edge v-w to tree T create a cycle?
If not, add it.

How difficult?
- E + v
- V         -> run DFS from v, check if w is reachable.
- logV
- log * V   -> use the union-find data structure!
- 1


Efficient solution. Use the union-find data strcuture.
- Maintain a set for each connected component in T.
- If v and w are in same set, then adding v-w would
create a cycle
- To add v-w to T, merge sets containing v and w.


public class KruskalMST{
    private Queue<Edge> mst = new Queue<Edge>();

    public KruskalMST(EdgeWeightedGraph G){
        MinPQ<Edge> pq = new MinPQ<Edge>();
        for(Edge e: G.edges()) pq.insert(e);

        UF uf = new UF(G.V());
        while(!pq.isEmpty() && mst.size() < G.V() -1){
            Edge e = pq.delMin();
            int v = e.either(), w = e.other(v);
            if(!uf.connected(v,w)){
                uf.union(v,w);
                mst.enqueue(e)
            }
        }
    }
    public Iterable<Edge> edges(){
        return mst;
    }
}


Time complexity: ElogE

Operations      frequency           time per op
----------------------------------------------------
build pq            1                     E
delete-min          E                   logE
connected           E                   logV
union               V                   logV
only will add V-1 egdes.



Prim's Algorithm
----------------------------------------------------------
- Start with vertex 0 and greedily grow tree T.
- Add to T the min weight edge with exactly one endpoint in T.
- Repeat until V - 1 edges.


Implementation Challenge.
Find the min weight edge with exactly one endpoint in T.

How difficult?
- E         -> try all edges
- V
- logE      -> use a priority queue.(lazy implementation)
- log * E
- 1


Lazy solution. Maintain a PQ of edges with(at least)
one endpoint in T.
- Key= edge; priority= weight of edge.
- Delete-min to determine next edge e = v-w to add to T.
- Disregard if both endpoints v and w are in T.
- Otherwise, let w be the vertex not in T:
    - add to PQ any edge incident to w(assuming other endpoint
    not in T)
    - add w to T.


public class LazyPrimMST{
    private boolean[] marked;
    private Queue<Edge> mst;
    private MinPQ<Edge> pq;

    public LazyPrimMST(WeightedGraph G){
        pq = new MinPQ<Edge>();
        mst = new Queue<Edge>();
        marked = new boolean[G.V()];
        visit(G, 0);

        while(!pq.isEmpty()){
            Edge e = pq.delMin();
            int v = e.either(), w = e.other(v);
            if(marked[v] && marked[w]) continue;
            mst.enqueue(e);
            if(!marked[v]) visit(G, v);
            if(!marked[w]) visit(G, w);
        }
    }

    private void visit(WeightedGraph G, int v){
        marked[v] = true;
        for(Edge e : G.adj(v)){
            if(!marked[e.other(v)]) pq.insert(e);
        }
    }

    public Iterable<Edge> mst(){return mst;}
}



Time Complexcity. ElogE
Operations      frequency           time per op
----------------------------------------------------
delete min            E                   logE
insert                E                   logE



eager implementation
solution. Maintain a PQ of vertices connected by an edge to T,
where priority of vertex v=weight of shortest edge connecting
v to T.


Indexed priority queue
Associate an index between 0 and N-1 with each key in a priority queue.
- Client can insert and delete the minimum.
- Client can change the key by specifying the index.

public class IndexMinPQ<Key extends Comparable<Key>>
    IndexMinPQ(int N)
void insert(int i, Key key)
void decreaseKey(int i, Key key)
boolean contains(int i)
int delMin()
boolean isEmpty()
int size()



Time complexity. can be ElogV



MST context
----------------------------------------------------------
Does linear algorithm exist for MST?
Not sure yet.


Euclidean MST
Given N points in the plane, find MST connecting them, where
the distances between points pairs are their Euclidean distances.


Brute force: Compute ~N^2/2 distances and run Prim's algorithm
Ingenuity. Exploit geometry and do it in ~cNlogN


Scientific application: clustering
k-clustering.
Distance function.

Goal. Divide into clusters so that objects in different clusters
are far apart.


single-link clustering.





