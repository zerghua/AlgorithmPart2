Some graph-processing problems

1. Path. Is there a path between s and t?
2. Shortest path. What is the shortest path between s and t?

3. Cycle. Is there a cycle in the graph?
4. Euler tour. Is there a cycle that uses each edge exactly once?
5. Hamilton tour. Is there a cycle that used each vertex exactly once?

6. Connectivity. Is there a way to connect all of the vertices?
7. MST(Minimum Spanning Tree). What is the best way to connect all of the vertices?
8. Bioconnectivity. Is there a vertex whose removal disconnects the graph?


9. Planarity. Can you draw the graph in the plane with no crossing edges?
10.Graph isomorphism. Do two adjacency list represent the same graph?


----------------------------------------------------------
Graph representation
Vertex representation
1. This lecture: use integer between 0 and V-1
2. Application: convert between names and integers with symbol table.

Anomalies:
1. self-loop
2. paralleled edges


Graph API
public class Graph{
    Graph(int V)    // create an empty graph with V vertices
    Graph(In in)    // create a graph from input stream
    void addEdge(int v, int w)  // add an edge v-w
    Iterable<Integer> adj(int v)    // vertices adjacent to v
    int V() // number of vertices
    int E() // number of edges
    String toString()   // string representation
}

// client
In in = new Int(args[0]);
Graph G = new Graph(in);
for(int v = 0; v < G.V(); v++){
    for(int w : G.adj(v)) StdOut.println(v + "-" + w);
}


Typical graph-processing code
// compute the degree of v
public static int degree(Graph G, int v){
    int degree = 0;
    for(int w : G.adj(v)) degree++;
    return degree;
}

// compute maximum degree
public static int maxDegree(Graph G){
    int max = 0;
    for(int v=0; v < G.V(); v++){
        max = Math.max(max, degree(G, v));
    }
    return max;
}

// compute average degree
public static double averageDegree(Graph G){
    return 2.0 * G.E() / G.V();
}

// count of self-loops
public static int numberOfSelfLoops(Graph G){
    int count = 0;
    for(int v=0; v<G.V(); v++){
        for(int w : G.adj(v)) if(v == w) count++;
    }
    return count / 2;    // each edge counted twice
}



1. set-of-edges graph representation
Maintain a list of the edges, linked list or array

2. Adjacency-matrix graph representation
Maintain a two dimensional V by V boolean array:

3. Adjacency-list graph representation
Maintain vertex-indexed array of lists


Adjacency-list graph representation: Java implementation
public class Graph{
    private final int V;
    private Bag<Integer>[] adj; // arraylist of arraylist

    public Graph(int V){
        this.V = V;
        adj = (Bag<Integer>[]) new Bag[V];
        for(int v =0; v < V; v++) adj[v] = new Bag<Integer>();
    }

    public void addEdge(int v, int w){
        adj[v].add(w);
        adj[w].add(v);
    }

    public Iterable<Integer> adj(int v){
        return adj[v];
    }
}

----------------------------------------------------------
Depth-First Search
Maze exploration
Vertex = intersection
Edge = passage

Tremaux Maze exploration
Algorithm
1. Unroll a ball of string behind you.
2. Mark each visited intersection and each visited passage.
3. Retrace steps when no unvisited options.


Goal. Systematically search through a graph.
Idea. Mimic maze exploration.

DFS(to visit a vertex v)
Mark v as visited.
Recursively visit all unmarked vertices w adjacent to v.


Typical applications.
1. Find all vertices connected to a given source vertex.
2. Find a path between two vertices.


Design pattern for graph processing
Design pattern. Decouple graph data type from graph processing.
1. Create a graph object.
2. Pass the Graph to a graph-processing routine.
3. Query the graph-processing routine for information.

Paths paths = new Paths(G, s); // find path in G from source s.
for(int v = 0; v < G.V(); v++){
    if(path.hasPathTo(v)) StdOut.println(v);
}



public class DepthFirstPaths{
    private boolean[] marked;
    private int[] edgeTo;
    private int s;

    public DepthFirstPaths(Graph G, int s){
        ...
        dfs(G, s);
    }

    private void dfs(Graph G, int v){
        marked[v] = true;
        for(int w : G.adj(v)){
            if(!marked[w]){
                dfs(G, w);
                edgeTo[w] = v;
            }
        }
    }
}

DFS properties.
Proposition.
1. DFS marks all vertices connected to s in time proportional
to the sum of their degrees.

2. Each vertex connected to s is visited once.

3. After DFS, can find vertices connected to s in constant
time and can find a path to s(if one exists) in time
proportional to its length.(backtrack to parent)

public boolean hasPathTo(int v){ return marked[v];}

public Iterable<Integer> pathTo(int v){
    if(!hasPathTo(v)) return null;
    Stack<Integer> path = new Stack<Integer>();
    for(int x = v; x != s; x = edgeTo[x]) path.push(x);
    path.push(s);
    return path;
}

DFS application(flood fill)


----------------------------------------------------------
Breadth-First Search
Repeat until queue is empty:
1. remove vertex v from queue.
2. Add to queue all unmarked vertices adjacent to v and mark them.


Shortest path. Find path from s to t that uses fewest number of edges.

BFS(from source vertex s)
put s onto a FIFO queue, and mark s as visited
Repeat until queue is empty:
1. remove the least recently add vertex v.
2. add each of v's unvisited neighbours to the queue and mark them as visited.



BFS properties.
BFS computes shortest paths(fewest number of edges) from s to
all other vertices in a graph in time proportional to E + V.



public class BreadthFirstPaths{
    private boolean[] marked;
    private int[] edgeTo;

    ...

    private void bfs(Graph G, int s){
        Queue<Integer> q = new Queue<Integer>();
        q.enqueue(s);
        marked[s] = true;
        while(!q.isEmpty()){
            int v = q.dequeue();
            for(int w : G.adj(v)){
                if(!marked[w]){
                    q.enqueue(w);
                    marked[w] true;
                    edgeTo[w] = v;
                }
            }
        }
    }
}


BFS application
routing: Fewest number of hops in a communication network.
Kevin Bacon numbers.
Erdos numbers.


----------------------------------------------------------
Connected Components(number of islands)
Def. Vertices v and w are connected if there is a path between them.

Goal. Preprocess graph to answer queries of the form
"is v connected to w?" in constant time.

public class CC{
    CC(Graph G)
    boolean connected(int v, int w)
    int count()
    int id(int v)
}

Union-Find? Not quite.
DFS. Yes

Def. A connected component is a maximal set of connected vertices.

Goal. Partition vertices into connected components.
Initialize all vertices v as unmarked.
For each unmarked vertex v, run DFS to identify all vertices
discovered as part of the same components.

Connected components applications:
Study of spread of STDs
Particle detection
    Vertex: pixel.
    Edge: between two adjacent pixels with grayscale value >=70
    Blob: connected components of 20-30 pixels.
Particle tracking


----------------------------------------------------------
Graph-processing challenge Problems
1. Is a graph bipartite?
How difficult? Diligent algorithm student could do it.
simple DFS-based solution

2. Find a cycle?
How difficult? Any programmer could do it.
DFS.

3. Euler tour(Is there a cycle that uses each edge exactly once?)
How difficult? Diligent algorithm student could do it.(harder than bipartite)

4. Find a cycle that visits every vertex exactly once.
(traveling salesman problem)
How difficult? Intractable. Hamiltonian cycle(classical NP complete problem)

5. Are two graphs identical except for vertex names?
(same structure but can rename)
How difficult? No one knows.

6. Lay out a graph in the plane without crossing edges?
How difficult? Hire an expert.
Linear time DFS-based planarity algorithm. complex.



