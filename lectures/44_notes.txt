Shortest Paths APIs
----------------------------------------------------------
Shortest paths in an edge-weighted digraph
Given an edge weighted digraph, find the shortest path from s to t.

Shortest path applications
- PERT/CPM
- Map routing
- Seam carving
...


Restrictions on edge weights?
- Nonnegative weights.
- Arbitrary weights.
- Euclidean weights.


Cycles?
- No directed cycles.
- No "negative cycles"

Simplifying assumptions. Shortest paths from s to t exists.


public class DirectedEdge{
    DirectedEdge(int v, int w, double weight)
    int from()
    int to()
    double weight()
    String toString()
}

public class EdgeWeightedDigraph{
    EdgeWeightedDigraph(int v)
void addEdge(DirectedEdge e)
Iterable<DirectedEdge> adj(int v)
    ...
}


Single-source shortest paths API
Goal. Find the shortest path from s to every other vertex.

public class SP{
    SP(EdgeWeightedGraph G, int s)
double distTo(int v)
Iterable<DirectedEdge> pathTo(int v)
boolean hasPathTo(int v)
}



Shortest Path Properties
----------------------------------------------------------
Data structures for single-source shortest paths
Goal. Find the shortest path from s to every other vertex.
Observation. A shortest-paths tree(SPT) solution exists. why?

Consequence. Can represent the SPT with two vertex-indexed arrays:
- distTo[v] is length of shortest path from s to v.
- edgeTo[v] is last edge on shortest path from s to v.

public Iterable<DirectedEdge> pathTo(int v){
    Stack<DirectedEdge> path = new Stack<DirectedEdge>();
    for(DirectedEdge e = edgeTo[v]; e != null; e = edgeTo[e.from()]){
        path.push(e);
    }
    return path;
}

Edge relaxation
Relax edge e = v -> w

if e = v->w gives shortest path to w through v,
update both distTo[w] and edgeTo[w]


private void relax(DirectedEdge e){
    int v = e.from(), w = e.to();
    if(distTo[w] > distTo[v] + e.weight()){
        distTo[w] = distTo[v] + e.weight();
        edgeTo[w] = e;
    }
}


Generic Shortest-paths algorithm
Initialize distTo[s] = 0 and distTo[v] = Max for all other vertices.
repeat until optimality conditions are satisfied:
    - Relax any edge.


Efficient implementation. How to choose which edge to relax?
1. Dijkstra's algorithm(nonnegative weights)
2. Topological sort algorithm(no directed cycles)
3. Bellman-ford algorithm(no negative cycles)



Dijkstra's Algorithms
----------------------------------------------------------
-Consider vertices in increasing order of distance from s.(
non-tree vertex with the lowest distTo[] value).
-Add vertex to tree and relax all edges pointing from that vertex.


public class DijkstraSP{
    private DirectedEdge[] edgeTo;
    private double[] distTo;
    private IndexMinPQ<Double> pq;

    public DijkstraSP(EdgeWeightedGraph G, int s){
        edgeTo = new DirectedEdge[G.V()];
        distTo = new double[G.V()];
        pq = new IndexMinPQ<Double>(G.V());

        for(int v = 0; v < G.V(); v++){
            distTo[v] = Double.POSITIVE_INFINITY;
        }
        distTo[s] = 0.0;

        pq.insert(s, 0.0);
        while(!pq.isEmpty()){
            int v = pq.delMin();
            for(DirectedEdge e : G.adj(v)) relax(e);
        }
    }

    private void relax(DirectedEdge e){
        int v = e.from(), w = e.to();
        if(distTo[w] > distTo[v] + e.weight()){
            distTo[w] = distTo[v] + e.weight();
            edgeTo[w] = e;

            if(pq.contains(w)) pq.decreaseKey(w, distTo[w]);
            else               pq.insert(w, distTo[w]);
        }
    }
}


Prim's algorithm is essentially the same as Dijkstra's algorithm.
Both are in a family of algorithms that compute a graph's
spanning tree.


Main distinction: Rule used to choose next vertex for the tree.
- Prim's: closest vertex to the tree(via an undirected edge).
- Dijkstra: closest vertex ot the source(via a directed path).


Note: DFS and BFS are also in this family of algorithm.


Time complexity of Dijkstra.
depends on PQ implementation: v insert, v delete-min, E decrease-key
----------------------------------------------
unordered array: V^2        optimal for dense graph
binary heap:     ElogV      ideal for sparse graph
d-way heap:      ElogV      worth the trouble for time critical app.
Fibonacci heap:  E + Vlogv  not worth implement it.





Edge-Weighted DAGs
----------------------------------------------------------
Acyclic(no cycle) shortest paths
- consider vertices in topological order(precompute order, go through each)
- relax all edges pointing from that vertex.



public class AcyclicSP{
    private DirectedEdge[] edgeTo;
    private double[] distTo;

    public AcyclicSP(EdgeWeightedGraph G, int s){
        edgeTo = new DirectedEdge[G.V()];
        distTo = new double[G.V()];

        for(int v = 0; v < G.V(); v++){
            distTo[v] = Double.POSITIVE_INFINITY;
        }
        distTo[s] = 0.0;

        Topological topological = new Topological(G);
        for(int v : topological.order()){
            for(DirectedEdge e : G.adj(v)) relax(e);
        }
    }
}


Time complexity: E(need travel each edge) + V(topological sort)


Content-aware resizing
--------------------------------------
Seam carving
Resize an image without distortion for display on cell phones
and web browsers.

To find vertical seam:
- Grid DAG: vertex=pixel; edge = from pixel to 3 downward neighbours.
- Weight of pixel = energy function of 8 neighbouring pixels.
- Seam = shortest path(sum of vertex weights) from top to bottom.


To remove vertical seam:
- Delete pixels on seam(one in each row)


To handle negative weights.
Formulate as a shortest paths problem in edge-weighted DAGs.
- Negate all weights.
- Find shortest paths.
- Negate weights in result.



Longest paths in edge-weighted DAGs: application
Parallel job scheduling.
Given a set of jobs with durations and precedence constraints,
schedule the jobs(by finding a start time for each) so as to
achieve the minimum completion time, while respecting the constraints.


Critical path method(CPM) to convert to edged-weighted DAG
- source and sink vertices.
- Two vertices(begin and end) for each job
- Three edges for each job.
    - begin to end(weighted by duration)
    - source to begin(0 weight)
    - end to sink(0 weight)
- One each for each precedence constraint(0 weight).









Negative Weights
----------------------------------------------------------
